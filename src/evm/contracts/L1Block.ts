/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface L1BlockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEPOSITOR_ACCOUNT"
      | "basefee"
      | "batcherHash"
      | "hash"
      | "l1FeeOverhead"
      | "l1FeeScalar"
      | "number"
      | "sequenceNumber"
      | "setL1BlockValues"
      | "timestamp"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEPOSITOR_ACCOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "basefee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batcherHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "l1FeeOverhead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "l1FeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "number", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sequenceNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setL1BlockValues",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEPOSITOR_ACCOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "basefee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batcherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l1FeeOverhead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l1FeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "number", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1BlockValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface L1Block extends BaseContract {
  connect(runner?: ContractRunner | null): L1Block;
  waitForDeployment(): Promise<this>;

  interface: L1BlockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEPOSITOR_ACCOUNT: TypedContractMethod<[], [string], "view">;

  basefee: TypedContractMethod<[], [bigint], "view">;

  batcherHash: TypedContractMethod<[], [string], "view">;

  hash: TypedContractMethod<[], [string], "view">;

  l1FeeOverhead: TypedContractMethod<[], [bigint], "view">;

  l1FeeScalar: TypedContractMethod<[], [bigint], "view">;

  number: TypedContractMethod<[], [bigint], "view">;

  sequenceNumber: TypedContractMethod<[], [bigint], "view">;

  setL1BlockValues: TypedContractMethod<
    [
      _number: BigNumberish,
      _timestamp: BigNumberish,
      _basefee: BigNumberish,
      _hash: BytesLike,
      _sequenceNumber: BigNumberish,
      _batcherHash: BytesLike,
      _l1FeeOverhead: BigNumberish,
      _l1FeeScalar: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  timestamp: TypedContractMethod<[], [bigint], "view">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEPOSITOR_ACCOUNT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "basefee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "batcherHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "l1FeeOverhead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "l1FeeScalar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "number"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sequenceNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setL1BlockValues"
  ): TypedContractMethod<
    [
      _number: BigNumberish,
      _timestamp: BigNumberish,
      _basefee: BigNumberish,
      _hash: BytesLike,
      _sequenceNumber: BigNumberish,
      _batcherHash: BytesLike,
      _l1FeeOverhead: BigNumberish,
      _l1FeeScalar: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "timestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
