/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type UniversalPacketStruct = {
  srcPortAddr: BytesLike;
  mwBitmap: BigNumberish;
  destPortAddr: BytesLike;
  appData: BytesLike;
};

export type UniversalPacketStructOutput = [
  srcPortAddr: string,
  mwBitmap: bigint,
  destPortAddr: string,
  appData: string
] & {
  srcPortAddr: string;
  mwBitmap: bigint;
  destPortAddr: string;
  appData: string;
};

export type AckPacketStruct = { success: boolean; data: BytesLike };

export type AckPacketStructOutput = [success: boolean, data: string] & {
  success: boolean;
  data: string;
};

export interface GeneralMiddlewareInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MW_ID"
      | "authorizeMiddleware"
      | "authorizedMws"
      | "mw"
      | "onRecvMWAck"
      | "onRecvMWPacket"
      | "onRecvMWTimeout"
      | "onRecvUniversalPacket"
      | "onTimeoutUniversalPacket"
      | "onUniversalAcknowledgement"
      | "owner"
      | "renounceOwnership"
      | "sendMWPacket"
      | "sendUniversalPacket"
      | "sendUniversalPacketWithFee"
      | "setDefaultMw"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "RecvMWAck"
      | "RecvMWPacket"
      | "RecvMWTimeout"
      | "SendMWPacket"
      | "UCHPacketSent"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MW_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "authorizeMiddleware",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedMws",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onRecvMWAck",
    values: [
      BytesLike,
      UniversalPacketStruct,
      BigNumberish,
      AddressLike[],
      AckPacketStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRecvMWPacket",
    values: [BytesLike, UniversalPacketStruct, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onRecvMWTimeout",
    values: [BytesLike, UniversalPacketStruct, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onRecvUniversalPacket",
    values: [BytesLike, UniversalPacketStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onTimeoutUniversalPacket",
    values: [BytesLike, UniversalPacketStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onUniversalAcknowledgement",
    values: [BytesLike, UniversalPacketStruct, AckPacketStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendMWPacket",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendUniversalPacket",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendUniversalPacketWithFee",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MW_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeMiddleware",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedMws",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onRecvMWAck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRecvMWPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRecvMWTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRecvUniversalPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTimeoutUniversalPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onUniversalAcknowledgement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMWPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUniversalPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendUniversalPacketWithFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecvMWAckEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    mwData: BytesLike,
    ack: AckPacketStruct
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    mwData: string,
    ack: AckPacketStructOutput
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    mwData: string;
    ack: AckPacketStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecvMWPacketEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    mwData: BytesLike
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    mwData: string
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    mwData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecvMWTimeoutEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    mwData: BytesLike
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    mwData: string
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    mwData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendMWPacketEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    timeoutTimestamp: BigNumberish,
    mwData: BytesLike
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    timeoutTimestamp: bigint,
    mwData: string
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    timeoutTimestamp: bigint;
    mwData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UCHPacketSentEvent {
  export type InputTuple = [source: AddressLike, destination: BytesLike];
  export type OutputTuple = [source: string, destination: string];
  export interface OutputObject {
    source: string;
    destination: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GeneralMiddleware extends BaseContract {
  connect(runner?: ContractRunner | null): GeneralMiddleware;
  waitForDeployment(): Promise<this>;

  interface: GeneralMiddlewareInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MW_ID: TypedContractMethod<[], [bigint], "view">;

  authorizeMiddleware: TypedContractMethod<
    [middleware: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedMws: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  mw: TypedContractMethod<[], [string], "view">;

  onRecvMWAck: TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[],
      ack: AckPacketStruct
    ],
    [void],
    "nonpayable"
  >;

  onRecvMWPacket: TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [AckPacketStructOutput],
    "nonpayable"
  >;

  onRecvMWTimeout: TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  onRecvUniversalPacket: TypedContractMethod<
    [channelId: BytesLike, ucPacket: UniversalPacketStruct],
    [AckPacketStructOutput],
    "nonpayable"
  >;

  onTimeoutUniversalPacket: TypedContractMethod<
    [channelId: BytesLike, packet: UniversalPacketStruct],
    [void],
    "nonpayable"
  >;

  onUniversalAcknowledgement: TypedContractMethod<
    [channelId: BytesLike, packet: UniversalPacketStruct, ack: AckPacketStruct],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sendMWPacket: TypedContractMethod<
    [
      channelId: BytesLike,
      srcPortAddr: BytesLike,
      destPortAddr: BytesLike,
      srcMwIds: BigNumberish,
      appData: BytesLike,
      timeoutTimestamp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  sendUniversalPacket: TypedContractMethod<
    [
      channelId: BytesLike,
      destPortAddr: BytesLike,
      appData: BytesLike,
      timeoutTimestamp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  sendUniversalPacketWithFee: TypedContractMethod<
    [
      channelId: BytesLike,
      destPortAddr: BytesLike,
      appData: BytesLike,
      timeoutTimestamp: BigNumberish,
      gasLimits: [BigNumberish, BigNumberish],
      gasPrices: [BigNumberish, BigNumberish]
    ],
    [bigint],
    "payable"
  >;

  setDefaultMw: TypedContractMethod<
    [_middleware: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MW_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "authorizeMiddleware"
  ): TypedContractMethod<[middleware: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedMws"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(nameOrSignature: "mw"): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onRecvMWAck"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[],
      ack: AckPacketStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRecvMWPacket"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [AckPacketStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRecvMWTimeout"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRecvUniversalPacket"
  ): TypedContractMethod<
    [channelId: BytesLike, ucPacket: UniversalPacketStruct],
    [AckPacketStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onTimeoutUniversalPacket"
  ): TypedContractMethod<
    [channelId: BytesLike, packet: UniversalPacketStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onUniversalAcknowledgement"
  ): TypedContractMethod<
    [channelId: BytesLike, packet: UniversalPacketStruct, ack: AckPacketStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendMWPacket"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      srcPortAddr: BytesLike,
      destPortAddr: BytesLike,
      srcMwIds: BigNumberish,
      appData: BytesLike,
      timeoutTimestamp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendUniversalPacket"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      destPortAddr: BytesLike,
      appData: BytesLike,
      timeoutTimestamp: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendUniversalPacketWithFee"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      destPortAddr: BytesLike,
      appData: BytesLike,
      timeoutTimestamp: BigNumberish,
      gasLimits: [BigNumberish, BigNumberish],
      gasPrices: [BigNumberish, BigNumberish]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setDefaultMw"
  ): TypedContractMethod<[_middleware: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RecvMWAck"
  ): TypedContractEvent<
    RecvMWAckEvent.InputTuple,
    RecvMWAckEvent.OutputTuple,
    RecvMWAckEvent.OutputObject
  >;
  getEvent(
    key: "RecvMWPacket"
  ): TypedContractEvent<
    RecvMWPacketEvent.InputTuple,
    RecvMWPacketEvent.OutputTuple,
    RecvMWPacketEvent.OutputObject
  >;
  getEvent(
    key: "RecvMWTimeout"
  ): TypedContractEvent<
    RecvMWTimeoutEvent.InputTuple,
    RecvMWTimeoutEvent.OutputTuple,
    RecvMWTimeoutEvent.OutputObject
  >;
  getEvent(
    key: "SendMWPacket"
  ): TypedContractEvent<
    SendMWPacketEvent.InputTuple,
    SendMWPacketEvent.OutputTuple,
    SendMWPacketEvent.OutputObject
  >;
  getEvent(
    key: "UCHPacketSent"
  ): TypedContractEvent<
    UCHPacketSentEvent.InputTuple,
    UCHPacketSentEvent.OutputTuple,
    UCHPacketSentEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RecvMWAck(bytes32,bytes32,bytes32,uint256,bytes,bytes,tuple)": TypedContractEvent<
      RecvMWAckEvent.InputTuple,
      RecvMWAckEvent.OutputTuple,
      RecvMWAckEvent.OutputObject
    >;
    RecvMWAck: TypedContractEvent<
      RecvMWAckEvent.InputTuple,
      RecvMWAckEvent.OutputTuple,
      RecvMWAckEvent.OutputObject
    >;

    "RecvMWPacket(bytes32,bytes32,bytes32,uint256,bytes,bytes)": TypedContractEvent<
      RecvMWPacketEvent.InputTuple,
      RecvMWPacketEvent.OutputTuple,
      RecvMWPacketEvent.OutputObject
    >;
    RecvMWPacket: TypedContractEvent<
      RecvMWPacketEvent.InputTuple,
      RecvMWPacketEvent.OutputTuple,
      RecvMWPacketEvent.OutputObject
    >;

    "RecvMWTimeout(bytes32,bytes32,bytes32,uint256,bytes,bytes)": TypedContractEvent<
      RecvMWTimeoutEvent.InputTuple,
      RecvMWTimeoutEvent.OutputTuple,
      RecvMWTimeoutEvent.OutputObject
    >;
    RecvMWTimeout: TypedContractEvent<
      RecvMWTimeoutEvent.InputTuple,
      RecvMWTimeoutEvent.OutputTuple,
      RecvMWTimeoutEvent.OutputObject
    >;

    "SendMWPacket(bytes32,bytes32,bytes32,uint256,bytes,uint64,bytes)": TypedContractEvent<
      SendMWPacketEvent.InputTuple,
      SendMWPacketEvent.OutputTuple,
      SendMWPacketEvent.OutputObject
    >;
    SendMWPacket: TypedContractEvent<
      SendMWPacketEvent.InputTuple,
      SendMWPacketEvent.OutputTuple,
      SendMWPacketEvent.OutputObject
    >;

    "UCHPacketSent(address,bytes32)": TypedContractEvent<
      UCHPacketSentEvent.InputTuple,
      UCHPacketSentEvent.OutputTuple,
      UCHPacketSentEvent.OutputObject
    >;
    UCHPacketSent: TypedContractEvent<
      UCHPacketSentEvent.InputTuple,
      UCHPacketSentEvent.OutputTuple,
      UCHPacketSentEvent.OutputObject
    >;
  };
}
