/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GasAuditInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callWithBytes32"
      | "callWithString"
      | "channelIds1"
      | "channelIds2"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OpenIbcChannel1" | "OpenIbcChannel2"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "callWithBytes32",
    values: [AddressLike, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callWithString",
    values: [AddressLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "channelIds1",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "channelIds2", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "callWithBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callWithString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelIds1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelIds2",
    data: BytesLike
  ): Result;
}

export namespace OpenIbcChannel1Event {
  export type InputTuple = [
    portAddress: AddressLike,
    channelId: BytesLike,
    counterpartyPortId: string,
    coutnerpartyChannelId: BytesLike
  ];
  export type OutputTuple = [
    portAddress: string,
    channelId: string,
    counterpartyPortId: string,
    coutnerpartyChannelId: string
  ];
  export interface OutputObject {
    portAddress: string;
    channelId: string;
    counterpartyPortId: string;
    coutnerpartyChannelId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenIbcChannel2Event {
  export type InputTuple = [
    portAddress: AddressLike,
    channelId: string,
    counterpartyPortId: string,
    coutnerpartyChannelId: string
  ];
  export type OutputTuple = [
    portAddress: string,
    channelId: string,
    counterpartyPortId: string,
    coutnerpartyChannelId: string
  ];
  export interface OutputObject {
    portAddress: string;
    channelId: string;
    counterpartyPortId: string;
    coutnerpartyChannelId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GasAudit extends BaseContract {
  connect(runner?: ContractRunner | null): GasAudit;
  waitForDeployment(): Promise<this>;

  interface: GasAuditInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callWithBytes32: TypedContractMethod<
    [
      portAddress: AddressLike,
      channelId: BytesLike,
      counterpartyPortId: string,
      coutnerpartyChannelId: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  callWithString: TypedContractMethod<
    [
      portAddress: AddressLike,
      channelId: string,
      counterpartyPortId: string,
      coutnerpartyChannelId: string
    ],
    [void],
    "nonpayable"
  >;

  channelIds1: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  channelIds2: TypedContractMethod<[arg0: string], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callWithBytes32"
  ): TypedContractMethod<
    [
      portAddress: AddressLike,
      channelId: BytesLike,
      counterpartyPortId: string,
      coutnerpartyChannelId: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "callWithString"
  ): TypedContractMethod<
    [
      portAddress: AddressLike,
      channelId: string,
      counterpartyPortId: string,
      coutnerpartyChannelId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "channelIds1"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "channelIds2"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;

  getEvent(
    key: "OpenIbcChannel1"
  ): TypedContractEvent<
    OpenIbcChannel1Event.InputTuple,
    OpenIbcChannel1Event.OutputTuple,
    OpenIbcChannel1Event.OutputObject
  >;
  getEvent(
    key: "OpenIbcChannel2"
  ): TypedContractEvent<
    OpenIbcChannel2Event.InputTuple,
    OpenIbcChannel2Event.OutputTuple,
    OpenIbcChannel2Event.OutputObject
  >;

  filters: {
    "OpenIbcChannel1(address,bytes32,string,bytes32)": TypedContractEvent<
      OpenIbcChannel1Event.InputTuple,
      OpenIbcChannel1Event.OutputTuple,
      OpenIbcChannel1Event.OutputObject
    >;
    OpenIbcChannel1: TypedContractEvent<
      OpenIbcChannel1Event.InputTuple,
      OpenIbcChannel1Event.OutputTuple,
      OpenIbcChannel1Event.OutputObject
    >;

    "OpenIbcChannel2(address,string,string,string)": TypedContractEvent<
      OpenIbcChannel2Event.InputTuple,
      OpenIbcChannel2Event.OutputTuple,
      OpenIbcChannel2Event.OutputObject
    >;
    OpenIbcChannel2: TypedContractEvent<
      OpenIbcChannel2Event.InputTuple,
      OpenIbcChannel2Event.OutputTuple,
      OpenIbcChannel2Event.OutputObject
    >;
  };
}
