/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type UniversalPacketStruct = {
  srcPortAddr: BytesLike;
  mwBitmap: BigNumberish;
  destPortAddr: BytesLike;
  appData: BytesLike;
};

export type UniversalPacketStructOutput = [
  srcPortAddr: string,
  mwBitmap: bigint,
  destPortAddr: string,
  appData: string
] & {
  srcPortAddr: string;
  mwBitmap: bigint;
  destPortAddr: string;
  appData: string;
};

export type AckPacketStruct = { success: boolean; data: BytesLike };

export type AckPacketStructOutput = [success: boolean, data: string] & {
  success: boolean;
  data: string;
};

export interface IbcMwPacketReceiverInterface extends Interface {
  getFunction(
    nameOrSignature: "onRecvMWAck" | "onRecvMWPacket" | "onRecvMWTimeout"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onRecvMWAck",
    values: [
      BytesLike,
      UniversalPacketStruct,
      BigNumberish,
      AddressLike[],
      AckPacketStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onRecvMWPacket",
    values: [BytesLike, UniversalPacketStruct, BigNumberish, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onRecvMWTimeout",
    values: [BytesLike, UniversalPacketStruct, BigNumberish, AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "onRecvMWAck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRecvMWPacket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onRecvMWTimeout",
    data: BytesLike
  ): Result;
}

export interface IbcMwPacketReceiver extends BaseContract {
  connect(runner?: ContractRunner | null): IbcMwPacketReceiver;
  waitForDeployment(): Promise<this>;

  interface: IbcMwPacketReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  onRecvMWAck: TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[],
      ack: AckPacketStruct
    ],
    [void],
    "nonpayable"
  >;

  onRecvMWPacket: TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [AckPacketStructOutput],
    "nonpayable"
  >;

  onRecvMWTimeout: TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "onRecvMWAck"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[],
      ack: AckPacketStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRecvMWPacket"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [AckPacketStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onRecvMWTimeout"
  ): TypedContractMethod<
    [
      channelId: BytesLike,
      ucPacket: UniversalPacketStruct,
      mwIndex: BigNumberish,
      mwAddrs: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
