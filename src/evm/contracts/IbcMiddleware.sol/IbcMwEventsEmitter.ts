/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export type AckPacketStruct = { success: boolean; data: BytesLike };

export type AckPacketStructOutput = [success: boolean, data: string] & {
  success: boolean;
  data: string;
};

export interface IbcMwEventsEmitterInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "RecvMWAck"
      | "RecvMWPacket"
      | "RecvMWTimeout"
      | "SendMWPacket"
  ): EventFragment;
}

export namespace RecvMWAckEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    mwData: BytesLike,
    ack: AckPacketStruct
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    mwData: string,
    ack: AckPacketStructOutput
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    mwData: string;
    ack: AckPacketStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecvMWPacketEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    mwData: BytesLike
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    mwData: string
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    mwData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecvMWTimeoutEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    mwData: BytesLike
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    mwData: string
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    mwData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendMWPacketEvent {
  export type InputTuple = [
    channelId: BytesLike,
    srcPortAddr: BytesLike,
    destPortAddr: BytesLike,
    mwId: BigNumberish,
    appData: BytesLike,
    timeoutTimestamp: BigNumberish,
    mwData: BytesLike
  ];
  export type OutputTuple = [
    channelId: string,
    srcPortAddr: string,
    destPortAddr: string,
    mwId: bigint,
    appData: string,
    timeoutTimestamp: bigint,
    mwData: string
  ];
  export interface OutputObject {
    channelId: string;
    srcPortAddr: string;
    destPortAddr: string;
    mwId: bigint;
    appData: string;
    timeoutTimestamp: bigint;
    mwData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IbcMwEventsEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): IbcMwEventsEmitter;
  waitForDeployment(): Promise<this>;

  interface: IbcMwEventsEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "RecvMWAck"
  ): TypedContractEvent<
    RecvMWAckEvent.InputTuple,
    RecvMWAckEvent.OutputTuple,
    RecvMWAckEvent.OutputObject
  >;
  getEvent(
    key: "RecvMWPacket"
  ): TypedContractEvent<
    RecvMWPacketEvent.InputTuple,
    RecvMWPacketEvent.OutputTuple,
    RecvMWPacketEvent.OutputObject
  >;
  getEvent(
    key: "RecvMWTimeout"
  ): TypedContractEvent<
    RecvMWTimeoutEvent.InputTuple,
    RecvMWTimeoutEvent.OutputTuple,
    RecvMWTimeoutEvent.OutputObject
  >;
  getEvent(
    key: "SendMWPacket"
  ): TypedContractEvent<
    SendMWPacketEvent.InputTuple,
    SendMWPacketEvent.OutputTuple,
    SendMWPacketEvent.OutputObject
  >;

  filters: {
    "RecvMWAck(bytes32,bytes32,bytes32,uint256,bytes,bytes,tuple)": TypedContractEvent<
      RecvMWAckEvent.InputTuple,
      RecvMWAckEvent.OutputTuple,
      RecvMWAckEvent.OutputObject
    >;
    RecvMWAck: TypedContractEvent<
      RecvMWAckEvent.InputTuple,
      RecvMWAckEvent.OutputTuple,
      RecvMWAckEvent.OutputObject
    >;

    "RecvMWPacket(bytes32,bytes32,bytes32,uint256,bytes,bytes)": TypedContractEvent<
      RecvMWPacketEvent.InputTuple,
      RecvMWPacketEvent.OutputTuple,
      RecvMWPacketEvent.OutputObject
    >;
    RecvMWPacket: TypedContractEvent<
      RecvMWPacketEvent.InputTuple,
      RecvMWPacketEvent.OutputTuple,
      RecvMWPacketEvent.OutputObject
    >;

    "RecvMWTimeout(bytes32,bytes32,bytes32,uint256,bytes,bytes)": TypedContractEvent<
      RecvMWTimeoutEvent.InputTuple,
      RecvMWTimeoutEvent.OutputTuple,
      RecvMWTimeoutEvent.OutputObject
    >;
    RecvMWTimeout: TypedContractEvent<
      RecvMWTimeoutEvent.InputTuple,
      RecvMWTimeoutEvent.OutputTuple,
      RecvMWTimeoutEvent.OutputObject
    >;

    "SendMWPacket(bytes32,bytes32,bytes32,uint256,bytes,uint64,bytes)": TypedContractEvent<
      SendMWPacketEvent.InputTuple,
      SendMWPacketEvent.OutputTuple,
      SendMWPacketEvent.OutputObject
    >;
    SendMWPacket: TypedContractEvent<
      SendMWPacketEvent.InputTuple,
      SendMWPacketEvent.OutputTuple,
      SendMWPacketEvent.OutputObject
    >;
  };
}
