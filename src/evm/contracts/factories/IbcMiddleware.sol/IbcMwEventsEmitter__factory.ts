/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IbcMwEventsEmitter,
  IbcMwEventsEmitterInterface,
} from "../../IbcMiddleware.sol/IbcMwEventsEmitter";

const _abi = [
  {
    type: "event",
    name: "RecvMWAck",
    inputs: [
      {
        name: "channelId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "srcPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "destPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "mwId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "appData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "mwData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "ack",
        type: "tuple",
        indexed: false,
        internalType: "struct AckPacket",
        components: [
          {
            name: "success",
            type: "bool",
            internalType: "bool",
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RecvMWPacket",
    inputs: [
      {
        name: "channelId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "srcPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "destPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "mwId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "appData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "mwData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "RecvMWTimeout",
    inputs: [
      {
        name: "channelId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "srcPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "destPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "mwId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "appData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "mwData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "SendMWPacket",
    inputs: [
      {
        name: "channelId",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "srcPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "destPortAddr",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "mwId",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
      {
        name: "appData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
      {
        name: "timeoutTimestamp",
        type: "uint64",
        indexed: false,
        internalType: "uint64",
      },
      {
        name: "mwData",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
] as const;

export class IbcMwEventsEmitter__factory {
  static readonly abi = _abi;
  static createInterface(): IbcMwEventsEmitterInterface {
    return new Interface(_abi) as IbcMwEventsEmitterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IbcMwEventsEmitter {
    return new Contract(address, _abi, runner) as unknown as IbcMwEventsEmitter;
  }
}
