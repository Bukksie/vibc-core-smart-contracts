/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type OpIcs23ProofPathStruct = { prefix: BytesLike; suffix: BytesLike };

export type OpIcs23ProofPathStructOutput = [prefix: string, suffix: string] & {
  prefix: string;
  suffix: string;
};

export type OpIcs23ProofStruct = {
  path: OpIcs23ProofPathStruct[];
  key: BytesLike;
  value: BytesLike;
  prefix: BytesLike;
};

export type OpIcs23ProofStructOutput = [
  path: OpIcs23ProofPathStructOutput[],
  key: string,
  value: string,
  prefix: string
] & {
  path: OpIcs23ProofPathStructOutput[];
  key: string;
  value: string;
  prefix: string;
};

export type Ics23ProofStruct = {
  proof: OpIcs23ProofStruct[];
  height: BigNumberish;
};

export type Ics23ProofStructOutput = [
  proof: OpIcs23ProofStructOutput[],
  height: bigint
] & { proof: OpIcs23ProofStructOutput[]; height: bigint };

export interface IbcDispatcherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "channelCloseConfirm"
      | "channelCloseInit"
      | "channelOpenInit"
      | "feeVault"
      | "portPrefix"
      | "sendPacket"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "channelCloseConfirm",
    values: [AddressLike, BytesLike, Ics23ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "channelCloseInit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "channelOpenInit",
    values: [string, BigNumberish, boolean, string[], string]
  ): string;
  encodeFunctionData(functionFragment: "feeVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "portPrefix",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendPacket",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "channelCloseConfirm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelCloseInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "channelOpenInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "portPrefix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendPacket", data: BytesLike): Result;
}

export interface IbcDispatcher extends BaseContract {
  connect(runner?: ContractRunner | null): IbcDispatcher;
  waitForDeployment(): Promise<this>;

  interface: IbcDispatcherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  channelCloseConfirm: TypedContractMethod<
    [portAddress: AddressLike, channelId: BytesLike, proof: Ics23ProofStruct],
    [void],
    "nonpayable"
  >;

  channelCloseInit: TypedContractMethod<
    [channelId: BytesLike],
    [void],
    "nonpayable"
  >;

  channelOpenInit: TypedContractMethod<
    [
      version: string,
      ordering: BigNumberish,
      feeEnabled: boolean,
      connectionHops: string[],
      counterpartyPortId: string
    ],
    [void],
    "nonpayable"
  >;

  feeVault: TypedContractMethod<[], [string], "nonpayable">;

  portPrefix: TypedContractMethod<[], [string], "view">;

  sendPacket: TypedContractMethod<
    [channelId: BytesLike, payload: BytesLike, timeoutTimestamp: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "channelCloseConfirm"
  ): TypedContractMethod<
    [portAddress: AddressLike, channelId: BytesLike, proof: Ics23ProofStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "channelCloseInit"
  ): TypedContractMethod<[channelId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "channelOpenInit"
  ): TypedContractMethod<
    [
      version: string,
      ordering: BigNumberish,
      feeEnabled: boolean,
      connectionHops: string[],
      counterpartyPortId: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeVault"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "portPrefix"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendPacket"
  ): TypedContractMethod<
    [channelId: BytesLike, payload: BytesLike, timeoutTimestamp: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
